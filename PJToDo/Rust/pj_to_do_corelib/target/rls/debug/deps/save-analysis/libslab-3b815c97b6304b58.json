{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49],"program":"/Users/zoey.weng/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","slab","/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=3b815c97b6304b58","-C","extra-filename=-3b815c97b6304b58","--out-dir","/Users/zoey.weng/Desktop/Study/PJToDo/PJToDo/Rust/pj_to_do_corelib/target/rls/debug/deps","-L","dependency=/Users/zoey.weng/Desktop/Study/PJToDo/PJToDo/Rust/pj_to_do_corelib/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/zoey.weng/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,68,101,115,107,116,111,112,47,83,116,117,100,121,47,80,74,84,111,68,111,47,80,74,84,111,68,111,47,82,117,115,116,47,112,106,95,116,111,95,100,111,95,99,111,114,101,108,105,98,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,115,108,97,98,45,51,98,56,49,53,99,57,55,98,54,51,48,52,98,53,56,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"slab","disambiguator":[3708181999062796762,6544387781461572339]},"crate_root":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src","external_crates":[{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2890887578233885874,5152799171468466946]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14062988365976797844,7790830316499212353]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7485944583239190137,15112042312184178752]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[17008131393645190960,12100448432354137563]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[8907850612270385913,16671487671153994367]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17682228612152274229,1641713706473622929]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8936331760674375906,11759799085316440354]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[12661055655625829941,2857214206749325877]}},{"file_name":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[2227692320214802969,5434377638976631003]}}],"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25214,"line_start":1,"line_end":911,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25214,"line_start":1,"line_end":911,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/zoey.weng/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":16},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":24},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":112},{"krate":0,"index":118}],"decl_id":null,"docs":" Pre-allocated storage for a uniform data type.","sig":null,"attributes":[{"value":"deny(warnings, missing_docs, missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3584,"byte_end":3647,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"crate_name = \"slab\"","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3702,"byte_end":3725,"line_start":103,"line_end":103,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3970,"byte_end":3974,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"Slab","qualname":"::Slab","value":"Slab {  }","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Pre-allocated storage for a uniform data type","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4817,"byte_end":4828,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" A handle to a vacant entry in a `Slab`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4952,"byte_end":4956,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" An iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5106,"byte_end":5113,"line_start":168,"line_end":168,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35}],"decl_id":null,"docs":" A mutable iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5620,"byte_end":5623,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"name":"new","qualname":"<Slab<T>>::new","value":"fn () -> Slab<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new, empty `Slab`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6663,"byte_end":6676,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Slab<T>>::with_capacity","value":"fn (capacity: usize) -> Slab<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new, empty `Slab` with the specified capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7097,"byte_end":7105,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Slab<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of values the slab can store without reallocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8151,"byte_end":8158,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Slab<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for at least `additional` more values to be stored\n without allocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9389,"byte_end":9402,"line_start":303,"line_end":303,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<Slab<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve the minimum capacity required to store exactly `additional`\n more values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10759,"byte_end":10772,"line_start":351,"line_end":351,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Slab<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the slab as much as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11132,"byte_end":11137,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"clear","qualname":"<Slab<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the slab of all values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11519,"byte_end":11522,"line_start":390,"line_end":390,"column_start":12,"column_end":15},"name":"len","qualname":"<Slab<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of stored values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11860,"byte_end":11868,"line_start":406,"line_end":406,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Slab<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if there are no values stored in the slab.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12703,"byte_end":12707,"line_start":434,"line_end":434,"column_start":12,"column_end":16},"name":"iter","qualname":"<Slab<T>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the slab.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13593,"byte_end":13601,"line_start":466,"line_end":466,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Slab<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that allows modifying each value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14169,"byte_end":14172,"line_start":488,"line_end":488,"column_start":12,"column_end":15},"name":"get","qualname":"<Slab<T>>::get","value":"fn (&self, key: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14838,"byte_end":14845,"line_start":512,"line_end":512,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Slab<T>>::get_mut","value":"fn (&mut self, key: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the value associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15465,"byte_end":15478,"line_start":535,"line_end":535,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Slab<T>>::get_unchecked","value":"fn (&self, key: usize) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value associated with the given key without\n performing bounds checking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16150,"byte_end":16167,"line_start":561,"line_end":561,"column_start":19,"column_end":36},"name":"get_unchecked_mut","qualname":"<Slab<T>>::get_unchecked_mut","value":"fn (&mut self, key: usize) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the value associated with the given key\n without performing bounds checking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16995,"byte_end":17001,"line_start":586,"line_end":586,"column_start":12,"column_end":18},"name":"insert","qualname":"<Slab<T>>::insert","value":"fn (&mut self, val: T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the slab, returning key assigned to the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17810,"byte_end":17822,"line_start":617,"line_end":617,"column_start":12,"column_end":24},"name":"vacant_entry","qualname":"<Slab<T>>::vacant_entry","value":"fn (&mut self) -> VacantEntry<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a handle to a vacant entry allowing for further manipulation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18998,"byte_end":19004,"line_start":664,"line_end":664,"column_start":12,"column_end":18},"name":"remove","qualname":"<Slab<T>>::remove","value":"fn (&mut self, key: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the value associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19923,"byte_end":19931,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"contains","qualname":"<Slab<T>>::contains","value":"fn (&self, key: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if a value is associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20917,"byte_end":20923,"line_start":734,"line_end":734,"column_start":12,"column_end":18},"name":"retain","qualname":"<Slab<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retain only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23588,"byte_end":23594,"line_start":840,"line_end":840,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry<'a, T>>::insert","value":"fn (self, val: T) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the entry, returning a mutable reference to the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24348,"byte_end":24351,"line_start":870,"line_end":870,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry<'a, T>>::key","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the key associated with this entry.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4255,"byte_end":4259,"line_start":127,"line_end":127,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5275,"byte_end":5279,"line_start":179,"line_end":179,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21304,"byte_end":21308,"line_start":750,"line_end":750,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21543,"byte_end":21547,"line_start":761,"line_end":761,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22140,"byte_end":22144,"line_start":788,"line_end":788,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22394,"byte_end":22398,"line_start":797,"line_end":797,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22676,"byte_end":22683,"line_start":806,"line_end":806,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22973,"byte_end":22984,"line_start":817,"line_end":817,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24442,"byte_end":24446,"line_start":877,"line_end":877,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24846,"byte_end":24853,"line_start":896,"line_end":896,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4255,"byte_end":4259,"line_start":127,"line_end":127,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":124},"to":{"krate":2,"index":2560}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5275,"byte_end":5279,"line_start":179,"line_end":179,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21304,"byte_end":21308,"line_start":750,"line_end":750,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":124},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21543,"byte_end":21547,"line_start":761,"line_end":761,"column_start":34,"column_end":38},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":124},"to":{"krate":2,"index":2002}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22140,"byte_end":22144,"line_start":788,"line_end":788,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":124},"to":{"krate":2,"index":7854}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22394,"byte_end":22398,"line_start":797,"line_end":797,"column_start":32,"column_end":36},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":7854}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22676,"byte_end":22683,"line_start":806,"line_end":806,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":22},"to":{"krate":2,"index":7854}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22973,"byte_end":22984,"line_start":817,"line_end":817,"column_start":13,"column_end":24},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24442,"byte_end":24446,"line_start":877,"line_end":877,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":3854}},{"span":{"file_name":[47,85,115,101,114,115,47,122,111,101,121,46,119,101,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24846,"byte_end":24853,"line_start":896,"line_end":896,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":22},"to":{"krate":2,"index":3854}}]}